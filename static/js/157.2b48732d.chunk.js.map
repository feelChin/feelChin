{"version":3,"file":"static/js/157.2b48732d.chunk.js","mappings":"uIACA,MAAuB,mB,SCiBvB,MAhBA,SAAcA,GACZ,IAAQC,EAAgBD,EAAhBC,MAAOC,EAASF,EAATE,KAEf,OACE,iBAAKC,UAAWC,EAAhB,WACE,cACED,UAAU,6BACVE,QAAS,WACPH,QAGJ,wBAAKD,S,4DCSX,IAlBA,YAA4B,IAAD,EAAZK,EAAY,EAAZA,SACPC,GAAWC,EAAAA,EAAAA,MAEXP,EAAK,WADMQ,EAAAA,EAAAA,MACMC,aAAZ,aAAG,EAAgBT,MAE9B,OACE,iCACE,SAAC,IAAD,CACEA,MAAOA,EACPC,KAAM,WACJK,GAAU,MAGbD,O,0GCfP,SAASK,EAAUC,GACjB,OAAOA,EAAQ,GAAR,WAAiBA,GAAUA,EAGpC,IAAMC,EAAW,SAACD,GAChB,IAQME,GANwC,kBAA1CC,OAAOC,UAAUC,SAASC,KAAKN,GACpBA,EAAMO,UAEN,IAAIC,KAAKR,GAAOO,YAGJ,IAAIC,MAAOD,UAEtC,OAAOL,EAAQ,EAAIA,EAAQ,GAG7B,SAASO,EAAcrB,GACrB,IAAIsB,EACEC,EAAW,IAETC,EAAgBxB,EAAhBwB,KAAMC,EAAUzB,EAAVyB,MACd,GAAgCC,EAAAA,EAAAA,UAASb,EAASW,IAAlD,eAAOG,EAAP,KAAiBC,EAAjB,KAoCA,OAlCAC,EAAAA,EAAAA,YAAU,WACRD,EAAYf,EAASW,MACpB,CAACA,KAgBJK,EAAAA,EAAAA,YAAU,WACR,OAAIF,EAAWJ,GACbK,EAAY,QACZH,MAIFH,EAAQQ,YAAW,WACjBF,EAAYD,EAAWJ,KACtBA,GAEI,WACLQ,aAAaT,OAEd,CAACK,KAGF,oBAASxB,UAAU,gBAAnB,SACGwB,EAhCL,SAAuBH,GACrB,IAAMQ,EAAQ,KAGRC,EAAIC,KAAKC,MAAMX,EAAOQ,GACtBI,EAAIF,KAAKC,OAAOX,EAAOS,EAAID,GAHjB,KAIVK,EAAIH,KAAKC,OAAOX,EAAOS,EAAID,EAJjB,IAIyBI,GAAe,KACxD,OACE,4BACGzB,EAAUsB,GADb,IACkBtB,EAAUyB,GAD5B,IACiCzB,EAAU0B,MAuB/BC,CAAcX,GAAY,KAK5C,MAAeY,EAAAA,KAAWlB,GCnE1B,EAAgC,qCCsChC,MAlCA,WACE,IAAMmB,GAAWC,EAAAA,EAAAA,UACjB,GAA0Bf,EAAAA,EAAAA,WAAS,IAAIN,MAAOD,UAAY,KAA1D,eAAOT,EAAP,KAAcgC,EAAd,KACA,GAAwBhB,EAAAA,EAAAA,UAAS,IAAjC,eAAOiB,EAAP,KAAaC,EAAb,KAYA,OACE,SAAC,IAAD,WACE,qBAASzC,UAAS,UAAKC,EAAL,SAAlB,WACE,kBAAOyC,IAAKL,EAAUM,aAAa,wBACnC,mBACEzC,QAAS,YAfjB,WACE,IAAMO,EAAQ4B,EAASO,QAAQnC,MAC/B8B,EAAS9B,GACTgC,EAAQ,IAaAI,IAFJ,2BAOA,+CACA,SAAC,EAAD,CAAevB,MAhBrB,WACEmB,EAAQ,uBAeyBpB,KAAMd,KACnC,uBAAIiC","sources":["webpack://myreact/./src/components/head/index.module.scss?bdd4","components/head/index.js","components/learnWrapper/index.js","demo/timeCountDown/timeCountDown.js","webpack://myreact/./src/demo/timeCountDown/index.module.scss?7094","demo/timeCountDown/index.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"head\":\"head_head__yl3Oi\"};","import style from \"./index.module.scss\";\r\n\r\nfunction Head(props) {\r\n  const { title, back } = props;\r\n\r\n  return (\r\n    <div className={style.head}>\r\n      <i\r\n        className=\"iconfont icon-jiantou-copy\"\r\n        onClick={() => {\r\n          back();\r\n        }}\r\n      ></i>\r\n      <h1>{title}</h1>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Head;\r\n","import { Children } from \"react\";\r\nimport { useNavigate, useLocation } from \"react-router-dom\";\r\nimport Head from \"../../components/head\";\r\n\r\nfunction App({ children }) {\r\n  const navigate = useNavigate();\r\n  const location = useLocation();\r\n  const title = location.state?.title;\r\n\r\n  return (\r\n    <>\r\n      <Head\r\n        title={title}\r\n        back={() => {\r\n          navigate(-1);\r\n        }}\r\n      />\r\n      {children}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React, { useEffect, useState } from \"react\";\r\n\r\nfunction fixedZero(value) {\r\n  return value < 10 ? `0${value}` : value;\r\n}\r\n\r\nconst initTime = (value) => {\r\n  let targetTime;\r\n\r\n  if (Object.prototype.toString.call(value) === \"[object Date]\") {\r\n    targetTime = value.getTime();\r\n  } else {\r\n    targetTime = new Date(value).getTime();\r\n  }\r\n\r\n  const count = targetTime - new Date().getTime();\r\n\r\n  return count > 0 ? count : 0;\r\n};\r\n\r\nfunction TimeCountDown(props) {\r\n  let timer;\r\n  const interval = 1000;\r\n\r\n  const { time, onEnd } = props;\r\n  const [lastTime, setLasttime] = useState(initTime(time));\r\n\r\n  useEffect(() => {\r\n    setLasttime(initTime(time));\r\n  }, [time]);\r\n\r\n  function defaultFormat(time) {\r\n    const hours = 60 * 60 * 1000;\r\n    const minutes = 60 * 1000;\r\n\r\n    const h = Math.floor(time / hours);\r\n    const m = Math.floor((time - h * hours) / minutes);\r\n    const s = Math.floor((time - h * hours - m * minutes) / 1000);\r\n    return (\r\n      <span>\r\n        {fixedZero(h)}:{fixedZero(m)}:{fixedZero(s)}\r\n      </span>\r\n    );\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (lastTime < interval) {\r\n      setLasttime(0);\r\n      onEnd();\r\n      return;\r\n    }\r\n\r\n    timer = setTimeout(() => {\r\n      setLasttime(lastTime - interval);\r\n    }, interval);\r\n\r\n    return () => {\r\n      clearTimeout(timer);\r\n    };\r\n  }, [lastTime]);\r\n\r\n  return (\r\n    <section className=\"timeCountDown\">\r\n      {lastTime ? defaultFormat(lastTime) : \"\"}\r\n    </section>\r\n  );\r\n}\r\n\r\nexport default React.memo(TimeCountDown);\r\n","// extracted by mini-css-extract-plugin\nexport default {\"timeCountDown\":\"timeCountDown_timeCountDown__zAOX7\"};","import { useRef, useState } from \"react\";\r\nimport LearnWrapper from \"../../components/learnWrapper\";\r\nimport TimeCountDown from \"./timeCountDown\";\r\nimport style from \"./index.module.scss\";\r\n\r\nfunction Index() {\r\n  const inputRef = useRef();\r\n  const [state, setState] = useState(new Date().getTime() + 30000);\r\n  const [text, setText] = useState(\"\");\r\n\r\n  function onSet() {\r\n    const value = inputRef.current.value;\r\n    setState(value);\r\n    setText(\"\");\r\n  }\r\n\r\n  function onEnd() {\r\n    setText(\"结束了\");\r\n  }\r\n\r\n  return (\r\n    <LearnWrapper>\r\n      <section className={`${style.timeCountDown} page`}>\r\n        <input ref={inputRef} defaultValue=\"2022-8-23 20:51:23\" />\r\n        <button\r\n          onClick={() => {\r\n            onSet();\r\n          }}\r\n        >\r\n          确认\r\n        </button>\r\n        <p>倒计时</p>\r\n        <TimeCountDown onEnd={onEnd} time={state} />\r\n        <p>{text}</p>\r\n      </section>\r\n    </LearnWrapper>\r\n  );\r\n}\r\n\r\nexport default Index;\r\n"],"names":["props","title","back","className","style","onClick","children","navigate","useNavigate","useLocation","state","fixedZero","value","initTime","count","Object","prototype","toString","call","getTime","Date","TimeCountDown","timer","interval","time","onEnd","useState","lastTime","setLasttime","useEffect","setTimeout","clearTimeout","hours","h","Math","floor","m","s","defaultFormat","React","inputRef","useRef","setState","text","setText","ref","defaultValue","current","onSet"],"sourceRoot":""}